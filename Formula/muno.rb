# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Muno < Formula
  desc "Multi-repository UNified Orchestration for Claude Code agents"
  homepage "https://github.com/taokim/muno"
  version "1.1.5"
  license "MIT"

  on_macos do
    on_intel do
      url "https://github.com/taokim/muno/releases/download/v1.1.5/muno_Darwin_x86_64.tar.gz"
      sha256 "2eabbb06837fbc9fb16313f6bff1d6248ebc0438d3934febc301df097f3fd23b"

      def install
        bin.install "muno"

        # Download and install completions from source
        system "curl", "-L", "-o", "completions.tar.gz",
               "https://github.com/taokim/muno/archive/v1.1.5.tar.gz"
        system "tar", "-xzf", "completions.tar.gz", "--strip-components=1"

        # Install completions if they exist
        if Dir.exist?("completions")
          bash_completion.install "completions/muno.bash" => "muno"
          zsh_completion.install "completions/muno.zsh" => "_muno"
          fish_completion.install "completions/muno.fish" => "muno.fish"
        end
      end
    end
    on_arm do
      url "https://github.com/taokim/muno/releases/download/v1.1.5/muno_Darwin_arm64.tar.gz"
      sha256 "610bc6bc1ea328b94d6a37f2c046fbd6e83c76406645a2b891b1e81d583aa3f0"

      def install
        bin.install "muno"

        # Download and install completions from source
        system "curl", "-L", "-o", "completions.tar.gz",
               "https://github.com/taokim/muno/archive/v1.1.5.tar.gz"
        system "tar", "-xzf", "completions.tar.gz", "--strip-components=1"

        # Install completions if they exist
        if Dir.exist?("completions")
          bash_completion.install "completions/muno.bash" => "muno"
          zsh_completion.install "completions/muno.zsh" => "_muno"
          fish_completion.install "completions/muno.fish" => "muno.fish"
        end
      end
    end
  end

  on_linux do
    on_intel do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/taokim/muno/releases/download/v1.1.5/muno_Linux_x86_64.tar.gz"
        sha256 "82133316468812fcdb64e04109228d80c09897f57de366b04049d8383a596bcd"

        def install
          bin.install "muno"

          # Download and install completions from source
          system "curl", "-L", "-o", "completions.tar.gz",
                 "https://github.com/taokim/muno/archive/v1.1.5.tar.gz"
          system "tar", "-xzf", "completions.tar.gz", "--strip-components=1"

          # Install completions if they exist
          if Dir.exist?("completions")
            bash_completion.install "completions/muno.bash" => "muno"
            zsh_completion.install "completions/muno.zsh" => "_muno"
            fish_completion.install "completions/muno.fish" => "muno.fish"
          end
        end
      end
    end
    on_arm do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/taokim/muno/releases/download/v1.1.5/muno_Linux_arm64.tar.gz"
        sha256 "058b8c21f6b79d785f7e266c56ce5fc5c342c1703fccdab4083318ca46a48573"

        def install
          bin.install "muno"

          # Download and install completions from source
          system "curl", "-L", "-o", "completions.tar.gz",
                 "https://github.com/taokim/muno/archive/v1.1.5.tar.gz"
          system "tar", "-xzf", "completions.tar.gz", "--strip-components=1"

          # Install completions if they exist
          if Dir.exist?("completions")
            bash_completion.install "completions/muno.bash" => "muno"
            zsh_completion.install "completions/muno.zsh" => "_muno"
            fish_completion.install "completions/muno.fish" => "muno.fish"
          end
        end
      end
    end
  end

  def caveats
    <<~EOS
      To use the mcd function for easy navigation, add this to your shell config:

      For bash/zsh (~/.bashrc or ~/.zshrc):
        mcd() { cd "$(muno path "$@")" && pwd; }

      For fish (~/.config/fish/config.fish):
        function mcd
          cd (muno path $argv); and pwd
        end

      Shell completions have been installed and will be available after restarting your shell
      or sourcing your shell configuration file.
    EOS
  end

  test do
    system "#{bin}/muno", "--version"
    assert_match "muno", shell_output("#{bin}/muno --help")
  end
end
