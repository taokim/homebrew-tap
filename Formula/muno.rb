# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Muno < Formula
  desc "Multi-repository UNified Orchestration for Claude Code agents"
  homepage "https://github.com/taokim/muno"
  version "1.1.4"
  license "MIT"

  on_macos do
    on_intel do
      url "https://github.com/taokim/muno/releases/download/v1.1.4/muno_Darwin_x86_64.tar.gz"
      sha256 "bb6671bb5dbe44a9a798529e693868c1c98a075ef3c7bc676a3d9dd69a4e47fb"

      def install
        bin.install "muno"

        # Download and install completions from source
        system "curl", "-L", "-o", "completions.tar.gz",
               "https://github.com/taokim/muno/archive/v1.1.4.tar.gz"
        system "tar", "-xzf", "completions.tar.gz", "--strip-components=1"

        # Install completions if they exist
        if Dir.exist?("completions")
          bash_completion.install "completions/muno.bash" => "muno"
          zsh_completion.install "completions/muno.zsh" => "_muno"
          fish_completion.install "completions/muno.fish" => "muno.fish"
        end
      end
    end
    on_arm do
      url "https://github.com/taokim/muno/releases/download/v1.1.4/muno_Darwin_arm64.tar.gz"
      sha256 "c3c8e67b82da355b14a8f24d974a8fa09624352619b07e0f884fede4318731da"

      def install
        bin.install "muno"

        # Download and install completions from source
        system "curl", "-L", "-o", "completions.tar.gz",
               "https://github.com/taokim/muno/archive/v1.1.4.tar.gz"
        system "tar", "-xzf", "completions.tar.gz", "--strip-components=1"

        # Install completions if they exist
        if Dir.exist?("completions")
          bash_completion.install "completions/muno.bash" => "muno"
          zsh_completion.install "completions/muno.zsh" => "_muno"
          fish_completion.install "completions/muno.fish" => "muno.fish"
        end
      end
    end
  end

  on_linux do
    on_intel do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/taokim/muno/releases/download/v1.1.4/muno_Linux_x86_64.tar.gz"
        sha256 "32874afa650e29d04193aea7e9ee210a13e5a03243ce6449ce22fea2f06ce1d6"

        def install
          bin.install "muno"

          # Download and install completions from source
          system "curl", "-L", "-o", "completions.tar.gz",
                 "https://github.com/taokim/muno/archive/v1.1.4.tar.gz"
          system "tar", "-xzf", "completions.tar.gz", "--strip-components=1"

          # Install completions if they exist
          if Dir.exist?("completions")
            bash_completion.install "completions/muno.bash" => "muno"
            zsh_completion.install "completions/muno.zsh" => "_muno"
            fish_completion.install "completions/muno.fish" => "muno.fish"
          end
        end
      end
    end
    on_arm do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/taokim/muno/releases/download/v1.1.4/muno_Linux_arm64.tar.gz"
        sha256 "ee0d798e2788970c34cb81b4d6b8c74b5efc50d12ff286929166974091b131e6"

        def install
          bin.install "muno"

          # Download and install completions from source
          system "curl", "-L", "-o", "completions.tar.gz",
                 "https://github.com/taokim/muno/archive/v1.1.4.tar.gz"
          system "tar", "-xzf", "completions.tar.gz", "--strip-components=1"

          # Install completions if they exist
          if Dir.exist?("completions")
            bash_completion.install "completions/muno.bash" => "muno"
            zsh_completion.install "completions/muno.zsh" => "_muno"
            fish_completion.install "completions/muno.fish" => "muno.fish"
          end
        end
      end
    end
  end

  def caveats
    <<~EOS
      To use the mcd function for easy navigation, add this to your shell config:

      For bash/zsh (~/.bashrc or ~/.zshrc):
        mcd() { cd "$(muno path "$@")" && pwd; }

      For fish (~/.config/fish/config.fish):
        function mcd
          cd (muno path $argv); and pwd
        end

      Shell completions have been installed and will be available after restarting your shell
      or sourcing your shell configuration file.
    EOS
  end

  test do
    system "#{bin}/muno", "--version"
    assert_match "muno", shell_output("#{bin}/muno --help")
  end
end
